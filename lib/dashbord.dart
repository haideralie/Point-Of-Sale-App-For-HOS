import 'package:flutter/material.dart';
import 'dart:convert';

import 'package:hos_app/model/dashbordchart.dart';
import 'package:hos_app/piechart.dart';
import 'package:http/http.dart';
import 'package:fl_chart/fl_chart.dart';

class Dashbord extends StatefulWidget {
  @override
  _DashbordState createState() => _DashbordState();
}

class _DashbordState extends State<Dashbord> {
  List _salelist = [];
  Future saledata;

  List _purchaselist = [];
  Future purchasedata;

  List _expencelist = [];
  Future expencedata;

  List _paylist = [];
  Future paydata;

  List _recievelist = [];
  Future recievedata;

  Future<List> salechart() async {
    var response = await get('http://192.168.10.50:8081/api/Account/TotalSum');
    if (response.statusCode == 200) {
      var mydata = await jsonDecode(response.body);

      Autogenerated _dashbord = await Autogenerated.fromJson(mydata);
      for (var temp in _dashbord.saleTotal) {
        SaleTotal saleTotal = SaleTotal(saleTotal: temp.saleTotal);
        _salelist.add(saleTotal.saleTotal);
        print(_salelist);
        return Future.value(_salelist);
      }
    }
  }

  Future<List> paychart() async {
    var response = await get('http://192.168.10.50:8081/api/Account/TotalSum');
    if (response.statusCode == 200) {
      var mydata = await jsonDecode(response.body);

      Autogenerated _sale = await Autogenerated.fromJson(mydata);
      for (var temp in _sale.payableTotal) {
        PayableTotal payableTotal =
            PayableTotal(payableTotal: temp.payableTotal);
        _paylist.add(payableTotal.payableTotal);
        print(_paylist);
        return _paylist;
      }
    }
  }

  Future<List> recievechart() async {
    var response = await get('http://192.168.10.50:8081/api/Account/TotalSum');
    if (response.statusCode == 200) {
      var mydata = await jsonDecode(response.body);

      Autogenerated _recieve = await Autogenerated.fromJson(mydata);
      for (var temp in _recieve.receiveableTotal) {
        ReceiveableTotal receiveableTotal =
            ReceiveableTotal(receiveableTotal: temp.receiveableTotal);
        _recievelist.add(receiveableTotal.receiveableTotal);
        print(_recievelist);
        return _recievelist;
      }
    }
  }

  Future<List> expencechart() async {
    var response = await get('http://192.168.10.50:8081/api/Account/TotalSum');
    if (response.statusCode == 200) {
      var mydata = await jsonDecode(response.body);

      Autogenerated _recieve = await Autogenerated.fromJson(mydata);
      for (var temp in _recieve.expenseTotal) {
        ExpenseTotal expenseTotal =
            ExpenseTotal(expenseTotal: temp.expenseTotal);
        _expencelist.add(expenseTotal.expenseTotal);
        print(_expencelist);
        return _expencelist;
      }
    }
  }

  Future<List> purchasechart() async {
    var response = await get('http://192.168.10.50:8081/api/Account/TotalSum');
    if (response.statusCode == 200) {
      var mydata = await jsonDecode(response.body);

      Autogenerated _recieve = await Autogenerated.fromJson(mydata);
      for (var temp in _recieve.purchaseTotal) {
        PurchaseTotal purchaseTotal =
            PurchaseTotal(purchaseTotal: temp.purchaseTotal);
        _purchaselist.add(purchaseTotal.purchaseTotal);
        print(_purchaselist);
        return _purchaselist;
      }
    }
  }

  @override
  void initState() {
    // TODO: implement initState
    super.initState();

    saledata = salechart();
    recievedata = recievechart();
    purchasedata = purchasechart();
    expencedata = expencechart();
    paydata = paychart();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(
          title: Title(color: Colors.blue, child: Text('Dashbord')),
        ),
        body: Column(mainAxisAlignment: MainAxisAlignment.center, children: [
          Container(
            child: FutureBuilder(
                future: saledata,
                builder: (BuildContext context, snapshot) {
                  if (snapshot.hasData) {
                    return Text('Total Sales Rs.${snapshot.data.toString()}');
                  } else {
                    return Center(
                      child: CircularProgressIndicator(),
                    );
                  }
                }),
          ),
          Container(
            child: FutureBuilder(
                future: purchasedata,
                builder: (BuildContext context, snapshot) {
                  if (snapshot.hasData) {
                    return Text(
                        'Total Purchase Rs.${snapshot.data.toString()}');
                  } else {
                    return Center(
                      child: CircularProgressIndicator(),
                    );
                  }
                }),
          ),
          Container(
            child: FutureBuilder(
                future: expencedata,
                builder: (BuildContext context, snapshot) {
                  if (snapshot.hasData) {
                    return Text('Total Expence Rs.${snapshot.data.toString()}');
                  } else {
                    return Center(
                      child: CircularProgressIndicator(),
                    );
                  }
                }),
          ),
          Container(
            child: FutureBuilder(
                future: paydata,
                builder: (BuildContext context, snapshot) {
                  if (snapshot.hasData) {
                    return Text('Total Payable Rs.${snapshot.data.toString()}');
                  } else {
                    return Center(
                      child: CircularProgressIndicator(),
                    );
                  }
                }),
          ),
          Container(
            child: FutureBuilder(
                future: recievedata,
                builder: (BuildContext context, snapshot) {
                  if (snapshot.hasData) {
                    return Text(
                        'Total Recievale Rs.${snapshot.data.toString()}');
                  } else {
                    return Center(
                      child: CircularProgressIndicator(),
                    );
                  }
                }),
          ),
        ]));
  }
}
